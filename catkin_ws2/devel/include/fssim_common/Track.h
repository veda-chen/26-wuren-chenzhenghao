// Generated by gencpp from file fssim_common/Track.msg
// DO NOT EDIT!


#ifndef FSSIM_COMMON_MESSAGE_TRACK_H
#define FSSIM_COMMON_MESSAGE_TRACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace fssim_common
{
template <class ContainerAllocator>
struct Track_
{
  typedef Track_<ContainerAllocator> Type;

  Track_()
    : header()
    , cones_left()
    , cones_right()
    , cones_orange()
    , cones_orange_big()
    , tk_device_start()
    , tk_device_end()  {
    }
  Track_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cones_left(_alloc)
    , cones_right(_alloc)
    , cones_orange(_alloc)
    , cones_orange_big(_alloc)
    , tk_device_start(_alloc)
    , tk_device_end(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _cones_left_type;
  _cones_left_type cones_left;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _cones_right_type;
  _cones_right_type cones_right;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _cones_orange_type;
  _cones_orange_type cones_orange;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _cones_orange_big_type;
  _cones_orange_big_type cones_orange_big;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _tk_device_start_type;
  _tk_device_start_type tk_device_start;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _tk_device_end_type;
  _tk_device_end_type tk_device_end;





  typedef boost::shared_ptr< ::fssim_common::Track_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fssim_common::Track_<ContainerAllocator> const> ConstPtr;

}; // struct Track_

typedef ::fssim_common::Track_<std::allocator<void> > Track;

typedef boost::shared_ptr< ::fssim_common::Track > TrackPtr;
typedef boost::shared_ptr< ::fssim_common::Track const> TrackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fssim_common::Track_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fssim_common::Track_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fssim_common::Track_<ContainerAllocator1> & lhs, const ::fssim_common::Track_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.cones_left == rhs.cones_left &&
    lhs.cones_right == rhs.cones_right &&
    lhs.cones_orange == rhs.cones_orange &&
    lhs.cones_orange_big == rhs.cones_orange_big &&
    lhs.tk_device_start == rhs.tk_device_start &&
    lhs.tk_device_end == rhs.tk_device_end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fssim_common::Track_<ContainerAllocator1> & lhs, const ::fssim_common::Track_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fssim_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fssim_common::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fssim_common::Track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fssim_common::Track_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fssim_common::Track_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fssim_common::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fssim_common::Track_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fssim_common::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3e47dce05b0e0c04dc61079e1408cdf";
  }

  static const char* value(const ::fssim_common::Track_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3e47dce05b0e0c0ULL;
  static const uint64_t static_value2 = 0x4dc61079e1408cdfULL;
};

template<class ContainerAllocator>
struct DataType< ::fssim_common::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fssim_common/Track";
  }

  static const char* value(const ::fssim_common::Track_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fssim_common::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"geometry_msgs/Point[] cones_left\n"
"geometry_msgs/Point[] cones_right\n"
"geometry_msgs/Point[] cones_orange\n"
"geometry_msgs/Point[] cones_orange_big\n"
"geometry_msgs/Point[] tk_device_start\n"
"geometry_msgs/Point[] tk_device_end\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::fssim_common::Track_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fssim_common::Track_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cones_left);
      stream.next(m.cones_right);
      stream.next(m.cones_orange);
      stream.next(m.cones_orange_big);
      stream.next(m.tk_device_start);
      stream.next(m.tk_device_end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Track_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fssim_common::Track_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fssim_common::Track_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cones_left: ";
    if (v.cones_left.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.cones_left.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.cones_left[i]);
    }
    if (v.cones_left.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cones_right: ";
    if (v.cones_right.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.cones_right.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.cones_right[i]);
    }
    if (v.cones_right.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cones_orange: ";
    if (v.cones_orange.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.cones_orange.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.cones_orange[i]);
    }
    if (v.cones_orange.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cones_orange_big: ";
    if (v.cones_orange_big.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.cones_orange_big.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.cones_orange_big[i]);
    }
    if (v.cones_orange_big.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "tk_device_start: ";
    if (v.tk_device_start.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.tk_device_start.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.tk_device_start[i]);
    }
    if (v.tk_device_start.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "tk_device_end: ";
    if (v.tk_device_end.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.tk_device_end.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.tk_device_end[i]);
    }
    if (v.tk_device_end.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSSIM_COMMON_MESSAGE_TRACK_H
