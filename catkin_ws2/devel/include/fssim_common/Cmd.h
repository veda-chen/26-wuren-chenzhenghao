// Generated by gencpp from file fssim_common/Cmd.msg
// DO NOT EDIT!


#ifndef FSSIM_COMMON_MESSAGE_CMD_H
#define FSSIM_COMMON_MESSAGE_CMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fssim_common
{
template <class ContainerAllocator>
struct Cmd_
{
  typedef Cmd_<ContainerAllocator> Type;

  Cmd_()
    : dc(0.0)
    , delta(0.0)  {
    }
  Cmd_(const ContainerAllocator& _alloc)
    : dc(0.0)
    , delta(0.0)  {
  (void)_alloc;
    }



   typedef double _dc_type;
  _dc_type dc;

   typedef double _delta_type;
  _delta_type delta;





  typedef boost::shared_ptr< ::fssim_common::Cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fssim_common::Cmd_<ContainerAllocator> const> ConstPtr;

}; // struct Cmd_

typedef ::fssim_common::Cmd_<std::allocator<void> > Cmd;

typedef boost::shared_ptr< ::fssim_common::Cmd > CmdPtr;
typedef boost::shared_ptr< ::fssim_common::Cmd const> CmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fssim_common::Cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fssim_common::Cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fssim_common::Cmd_<ContainerAllocator1> & lhs, const ::fssim_common::Cmd_<ContainerAllocator2> & rhs)
{
  return lhs.dc == rhs.dc &&
    lhs.delta == rhs.delta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fssim_common::Cmd_<ContainerAllocator1> & lhs, const ::fssim_common::Cmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fssim_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fssim_common::Cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fssim_common::Cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fssim_common::Cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fssim_common::Cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fssim_common::Cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fssim_common::Cmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fssim_common::Cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c30c8d10cd397c67459b00d587e06f1";
  }

  static const char* value(const ::fssim_common::Cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c30c8d10cd397c6ULL;
  static const uint64_t static_value2 = 0x7459b00d587e06f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::fssim_common::Cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fssim_common/Cmd";
  }

  static const char* value(const ::fssim_common::Cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fssim_common::Cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 dc\n"
"float64 delta\n"
"\n"
;
  }

  static const char* value(const ::fssim_common::Cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fssim_common::Cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dc);
      stream.next(m.delta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fssim_common::Cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fssim_common::Cmd_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "dc: ";
    Printer<double>::stream(s, indent + "  ", v.dc);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "delta: ";
    Printer<double>::stream(s, indent + "  ", v.delta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSSIM_COMMON_MESSAGE_CMD_H
